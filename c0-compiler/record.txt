<Program>
  IntSym      int
  <ConstantDeclare>
  </ConstantDeclare>
  <VariableDeclare>
    <VariableDefine>(Maybe)
      Identity    a
      Comma       ,
      Identity    b
      Comma       ,
      Identity    c
      Comma       ,
      Identity    d
      Semic       ;
    </VariableDefine>(Right)
    IntSym      int
    <VariableDefine>(Maybe)
      Identity    add
      LPare       (
    </VariableDefine>(Wrong)
  </VariableDeclare>
  <FunctionDeclare or ProcedureDeclare>
    <FunctionDefine>
      IntSym      int
      <ParameterTable>
        Identity    x
        Comma       ,
        IntSym      int
        Identity    y
        RPare       )
      </ParameterTable>
      LBrac       {
      ReturnSym   return
      <CompoundStatement>
        <ConstantDeclare>
        </ConstantDeclare>
        <VariableDeclare>
          <VariableDefine>
          </VariableDefine>
        </VariableDeclare>
        <Statements>
          <Statement>
            <ReturnStatement>
              LPare       (
              Identity    x
              <Expression>
                <Term>
                  <Factor>
                    Plus        +
                  </Factor>
                </Term>
                Identity    y
                <Term>
                  <Factor>
                    RPare       )
                  </Factor>
                </Term>
              </Expression>
              Semic       ;
            </ReturnStatement>
            RBrac       }
          </Statement>
        </Statements>
      </CompoundStatement>
      VoidSym     void
    </FunctionDefine>
    <ProcedureDefine>
      MainSym     main
    </ProcedureDefine>
  </FunctionDeclare or ProcedureDeclare>
  <MainDefine>
    LPare       (
    RPare       )
    LBrac       {
    Identity    c
    <CompoundStatement>
      <ConstantDeclare>
      </ConstantDeclare>
      <VariableDeclare>
        <VariableDefine>
        </VariableDefine>
      </VariableDeclare>
      <Statements>
        <Statement>
          Assign      =
          <AssignStatement>
            Identity    a
            <Expression>
              <Term>
                <Factor>
                  Plus        +
                </Factor>
              </Term>
              Identity    b
              <Term>
                <Factor>
                  Semic       ;
                </Factor>
              </Term>
            </Expression>
          </AssignStatement>
          Identity    d
        </Statement>
        <Statement>
          Assign      =
          <AssignStatement>
            Identity    a
            <Expression>
              <Term>
                <Factor>
                  Plus        +
                </Factor>
              </Term>
              Identity    b
              <Term>
                <Factor>
                  Plus        +
                </Factor>
              </Term>
              Identity    add
              <Term>
                <Factor>
                  LPare       (
                  IntConst    2
                  <FunctionCallStatement>
                    <ValueParameterTable>
                      <Expression>
                        <Term>
                          <Factor>
                            <Integer>
                              Comma       ,
                            </Integer>
                          </Factor>
                        </Term>
                      </Expression>
                      IntConst    3
                      <Expression>
                        <Term>
                          <Factor>
                            <Integer>
                              RPare       )
                            </Integer>
                          </Factor>
                        </Term>
                      </Expression>
                    </ValueParameterTable>
                    Semic       ;
                  </FunctionCallStatement>
                </Factor>
              </Term>
            </Expression>
          </AssignStatement>
          RBrac       }
        </Statement>
      </Statements>
    </CompoundStatement>
  </MainDefine>
</Program>
