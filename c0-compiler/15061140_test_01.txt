const int MAX = 30;
const char ADD_c = '+', MINUS = '-', TIMES = '*', DIVIDE = '/';
int array[5];
int globalNum;
char globalCh;
int Fibonacci(int n){
    if(n <= -1)   return (-1);
    if(n == 0){
        return (0);
    }
    if (n > MAX) {
        return (-1);
    }
    if(n == 1){
        return (1);
    }
    if(n != 1){
        return (Fibonacci(n-1) + Fibonacci(n-2));
    }
}
void printString(){
    printf(" !#$&()+-*/,.?abcdefgABCDEFG|[-^]{}1234567890");
    printf("");
}
void print(int num){
    printf(" ",num);
}
void sort(){
    int i, j, temp;
    array[0] = 2;
    array[1] = 4;
    array[2] = 5;
    array[3] = 3;
    array[4] = 1;
	i = 0;
	do{
		j = i + 1;
		do{
				if(array[i] > array[j]){
							temp = array[j];
							array[j] = array[i];
							array[i] = temp;
				}
				j = j + 1;
		}while(j < 5);
		i = i + 1;
	}while(i < 5);
	i = 4;
	do{
        print(array[i]);
		i = i - 1;
    }while(i >= 0);
    return ;
}
int operation(int flag){
    int num_1, num_2, result;
    scanf(num_1, num_2);
    switch (flag) {
        case 0:{
            result = num_1 + num_2;
            printf(" ", ADD_c);
            return (result);
            }
        case 1:{
            result = num_1 - num_2;
            printf(" ", MINUS);
            return (result);
            }
        case 2:{
            result = num_1 * num_2;
            printf(" ",TIMES);
            return (result);
            }
        case 3:{
            if(num_2 != 0){
                result = num_1 / num_2;
                printf(" ",DIVIDE);
                return (result);
            }
            if(num_2 == 0){
                 printf("can't divide zero!");
                 return (-1);
            }
            }
    }
}
int add(int num_1, int num_2){
    return (num_1 + num_2);
}
void printNums(int num_1, int num_2, int num_3, int num_4){
    print(num_1);
    print(num_2);
    print(num_3);
    print(num_4);
}
void testExpr(){
    int a, b, c, expr1, expr2, expr3, expr4, array[10];
    char ch_1, ch_2;
    a = 1;
    b = 2;
    c = 3;
    array[0] = c;
    array[3] = 10;
    expr1 = a + b + c;
    expr2 = -a * array[0];
    expr3 = +b * c + a;
    expr4 = -+1 + a * b * c;
    printNums(expr1, expr2, expr3, expr4);
    expr1 = a + b + 2;
    expr2 = -a * add(b, c);
    expr3 = +b * (c + a);
    expr4 = a + a * array[add(a, b)] * 3;
    printNums(expr1, expr2, expr3, expr4);
    ch_1 = 'b';
    a = ch_1 + 1;
    ch_2 = ch_1 + 1;
    print(a);
    printf(" ", ch_2);
    ch_1 = '_';
    printf(" ", ch_1);
    ;
}

void main(){
    int num, flag, result;
    globalNum = 1;
    globalCh = 'c';
    scanf(num);
    print(Fibonacci(num));  
    printString();      
    sort();     
    scanf(flag);
    result = operation(flag);     
    print(result);
    testExpr();     
}
